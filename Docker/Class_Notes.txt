#######################
Day 11 - 1st Apr. 2024
#######################		
	
	- Containerization using Docker ::::
	
	Cloud Computing :
	
	Virtual Machine (VM) ::: Why we need ?
	
		- Hardware level Virtualization
		- VM are created using Hypervisor 
		- It is used to run the Operating System 
		- It consume more space and time to boot-up the VM.
	
	Containers :
	
		- OS level Virtualization
		- Containers are Created using Container - Engine.
		- It is used to run the Application/Task, NOT Operating System
		- If we run a Container without any task, the Container will immediately go to EXIT State.
		- It consume less space and time to start the application.
		- Containers run in a completly isolated environment
			- In the base OS - 	Control Group
								Name space 
								
	Containerization : Is a Process :::
	
		Using this process, we can reduce the no. of Vitual Machines 
		Eliminate the Environments related dependencies during deployments 
		
		
	Infra-Structure Perspective:::
	
			Jenkins_Master (VM)	--> jdk, jenkins				
							==> Used to create the Jenkins CICD pipeline project and schedule it to run in slave nodes.
				Jenkins_Slave1 (VM) --> git, jdk, maven 
				Jenkins_Slave2 (VM) --> git, python
				Jenkins_Slave2.1 (VM) --> git, python
				Jenkins_Slave3 (VM) --> git, .netcore
				Jenkins_Slave4 (VM) --> git, Angualar/NodeJS
			
	Containerization : Is a Process :::
	
			Jenkins_Master (VM)	
				Jenkins_Slave (VM)
					- Install Container Engine 
						C1	git, jdk, maven
						C2  git, python
						C3  git, python
						C4  git, .net core
						C5  git, Angualar/NodeJS
	
	Developers/Deployment Perspective :::
	
			Developer :
			
				DEV :
					Code the Application 
					
					Build 	--> Create Artifact - (*.war)			mywebapp_v1.0.war
					Test the artifacts - Unit Testing 
							jdk11,tomcat8.5 
			
				QA :
							jdk17,tomcat10 --> mywebapp_v1.0.war  - Running 
					
				UAT :
							jdk,tomcat --> mywebapp_v1.0.war  - Running 
							
				PROD :
							jdk,tomcat --> mywebapp_v1.0.war  - Running 
	
	
			Solution :
			Developer :
			
				DEV :
					Code the Application 
					
					Build 	--> Create Artifact - (*.war)			mywebapp_v1.0.war
					Test the artifacts - Unit Testing 
							jdk11,tomcat8.5 			
	
					Create Package : mywebapp_pkg1(mywebapp_v1.0.war,jdk11,tomcat8.5)  --> Application Image.
					Deploy the Application Package to higher environments
	
				QA :
							mywebapp_pkg1 
							using Container Engine, Create a container and run the application
							
		
		Terminologies :::
		
			- Container Engine 
			- Image 
			- Container
			- Container Registry
				- Contiainer Repository
				
				
				git - 
				
				tomcat - 
			
	
#######################
Day 12 - 2nd Apr. 2024
#######################			
		
	Terminologies :::
	
		- Container Engine 
		- Image 
		- Container
		- Container Registry
			- Contiainer Repository
			
	Installation of Docker Container Engine 
	
	Working with Docker CLI Commands :
	
	run
	create image 
	volumes 
	port mapping 
	publish docker images 
	Container Orchestration Tool 
		
	Containerization :
	
		- It is a process of packaging the application along with its dependencies.
		
	- Container Engine 
		- Docker Container Engine - used to create Container Images and Manage/Run the Containers
		
	- Image 
		- Is a Static file that defines the properties of Container.
		- Non-Executable 
		- It composed of various layers.
		
		Create Image : mywebapp_pkg1(mywebapp_v1.0.war,jdk11,tomcat8.5)  --> Application Image.
		
		
	- Container
		- Containers are the executable units of Images.
		
	- Container Registry
		- It is used to Manage and version control the Container Images 
		- Dockerhub
		- hub.docker.com
		
	- Contiainer Repository						
		- It is a sub-set of Container Registry
		
			
	Installation of Docker Container Engine :::  https://docs.docker.com/engine/install/
	
		sudo -i
		
		apt install docker.io -y
	
	Docker Cli Commands ::
	
	
	docker --version
	
	docker images 
	
	docker ps 
	
	docker ps -a
	
	
	docker pull centos		# Used to Download an images from docker hub to local machine 
	
	docker run <image_name>	# used to Create/run the container 
	
	Docker Run Command Options:
	
		docker run :: Modes of Execution :
		
		- Attached/Foreground Mode			# Default - Hold the terminal till the process completes.
			docker run <image_name>
	
		- Detached/Background Mode 
			docker run -d <image_name>
		
		- Interactive Mode 
			docker run -it <image_name> bash 	# Used to create 
		
	docker inspect <image_name> 			# Used to Inspect any Container Objects 
	
	docker history <image_name>
	
	docker exec -it <Container_id> bash		# To login to the running container.
	
		docker exec -it 32ee5be54a4d bash
		
	docker run <image>
	
	docker logs <container_id> 				# Used to capture the application container log 
	
	Port Mapping / Port Binding :
	
		- Is used to Map the Container Port and Host port
		
		docker run -it tomcat:8.0 bash 
		
		docker run -it -p 8085:8080 tomcat:8.0
		
		-p <host_port>:<container_port>
		
	docker start <container_id>
	
	docker stop <container_id>
	
	Create Container Image :::
	
	docker commit
		- Is used to create a container images based on the existing container.

		docker commit <existing_container_id> <new_container_image_name>

		Eg>: 
		
		docker commit 6417464a955b loksaieta/edu-centos-git:v1.0


	docker build 
	
		- Is used to create a container image from the scratch based on the Dockerfile definitions
		
		Dockerfile - Composed of various Instrustions to create layers of Image
		
		Eg.: 
		
		docker build -t loksaieta/edu-debian-git:v1.0 .

		docker run -it loksaieta/edu-debian-git-mvn:v1.0	

		FROM debian
		RUN apt-get update
		RUN apt-get install git -y
		RUN apt-get install maven -y
		
		Dockerfile :
		
		FROM tomcat 
		COPY target/mvn-hello-world.war usr/lib/tomcat/webapps/
		
		
		Create Image ; 
		
			myweb-app:v1.0 ==> publish to dockerhub
			
			pull it to any target machine

		IAC ::
		
		
	
	
	AWS	- ECS,ECR,EKS 
	
	AZ - ACS,ACR,AKS 	

    1  apt-get update -y
    2  sudo apt install openjdk-11-jre -y
    3  java --version
    4  sudo apt install maven -y
    5  mvn -version
    6  git --version
    7  clear
    8  useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin
    9  su - devopsadmin
   10  apt update -y
   11  clear
   12* apt install docker.io -y
   13  clear
   14  docker --version
   15  docker images
   16  docker ps
   17  docker ps -a
   18  docker images
   19  docker pull centos
   20  docker images
   21  docker run centos
   22  docker ps
   23  docker ps -a
   24  docker run centos sleep 20
   25  docker run -d centos sleep 20
   26  docker ps
   27  docker run centos sleep 20
   28  clear
   29  docker run -it centos bash
   30  docker inspect centos
   31  clear
   32  docker ps
   33  docker ps -a
   34  docker inspect aacfe98991f8
   35  docker history centos
   36  clear
   37  docker ps -a
   38  docker images
   39  docker run -d centos sleep 30
   40  docker ps -a
   41  docker exec -it 32ee5be54a4d bash
   42  docker ps -a
   43  clear
   44  docker images
   45  docker run ubuntu
   46  docker ps -a
   47  docker run -d centos sleep 20
   48  docker ps
   49  docker log dc3a876ecda3
   50  docker logs dc3a876ecda3
   51  docker ps
   52  docker run -d centos sleep 30
   53  docker ps
   54  docker logs 547ec9e7ed91
   55  clear
   56  docker ps -a
   57  docker run -it tomcat:8.0 bash
   58  clear
   59  docker run -it -p 8085:8080 tomcat:8.0
   60  clear
   61  history

   10  docker ps
   11  docker ps -a
   12  docker ps
   13  clear
   14  docker ps
   15  docker ps -a
   16  docker ps
   17  clear
   18  docker ps
   19  docker run -it -p 8086:8080 tomcat:8.0
   20  clear
   21  docker ps
   22  docker ps -a
   23  docker ps
   24  docker stop 6417464a955b
   25  docker ps -a
   26  clear
   27  history

   10  clear
   11  docker ps
   12  clear
   13  docker ps
   14  docker run centos sleep 20
   15  asdf
   16  clear
   17  docker run -d centos sleep 20
   18  docker ps
   19  docker stop 2c1d6f0143ce 47b448fc82a5
   20  docker ps
   21  docker ps -a
   22  docker start c78d690b4d6a
   23  docker ps
   24  docker stop c78d690b4d6a
   25  clear
   26  docker images
   27  docker run -it debian bash
   28  docker start 6417464a955b
   29  docker ps
   30  docker exec -it 6417464a955b bash
   31  clear
   32  docker ps -a
   33  docker images
   34  docker commit 6417464a955b loksaieta/edu-centos-git:v1.0
   35  docker images
   36  docker run -it loksaieta/edu-centos-git:v1.0 bash
   37  mkdir docker-contents
   38  cd docker-contents/
   39  vi Dockerfile
   40  cat Dockerfile
   41  docker build -t loksaieta/edu-debian-git:v1.0 .
   42  docker images
   43  cat Dockerfile
   44  vi Dockerfile
   45  clear
   46  docker build -t loksaieta/edu-debian-git:v1.0 .
   47  docker images
   48  docker history loksaieta/edu-debian-git:v1.0
   49  cat Dockerfile
   50  vi Dockerfile
   51  docker build -t loksaieta/edu-debian-git-mvn:v1.0 .
   52  cat Dockerfile
   53  docker images
   54  docker history loksaieta/edu-debian-git-mvn:v1.0
   55  docker run -it loksaieta/edu-debian-git-mvn:v1.0
   56  docker ps -a
   57  cat Dockerfile
   58  clear
   59  history

	
#######################
Day 13 - 3rd Apr. 2024
#######################		

	- Docker Build
	- Dockerfile Instructions 
	- Docker Volume 
	- Container Orcchestration 
		- docker compose / docker swarm 
		- kubernetes 
	

	- Docker Build:
		docker build -t loksaieta/edu-debian-git:v1.0 .
	
	- Dockerfile Instructions 
	
		FROM debian
		RUN apt-get update
		RUN apt-get install git -y
		RUN apt-get install maven -y	
		
		FROM 		# Used to identify the base image
		
		RUN 		# Used to execute the Package manager like apt-get / yum during during build action.
		
		COPY		# Is used copy the files from host volume to the container volume 
		
		CP 			# Is used to copy the files within the container volume 
	
		ARG			# Used to pass the arguments
		
		WORKDIR		# Used to set the present working directory 
		
		ENV			# Used to define environment path variable
		
		CMD			# Used to define the start-up task/command - This can be modified at runtime. 
		
		ENTRYPOINT 	# Used to define the start-up task/command - This cannot be modified at runtime.
		
		LABEL		# Assign a tag to a varible/object 
		
		EXPOSE		# Used to expose the container port
		
		

		FROM tomcat:8.0
		COPY ./target/mvn-hello-world.war /usr/local/tomcat/webapps
		EXPOSE 8080

		
How to publish the Image to Container Registry :
	
		docker login -u <Docker_Login_ID>
		
		prompt for password : <Enter the docker access token>
		
		docker push loksaieta/edu-debian-git-mvn:v1.0
		
	
	Container Volume :::
	
		Container 
		
		
		Production Environment -- Deployed my application using containers 
		
		Container Perspective :::
		
			- Stateless Application
					- It will not have any trace of execution
					- It doesnt need any volume to store the data from applications running in container.
					
					
			- Stateful Application
					- It leaves trace of execution atleast it will have the logs/reports as a proof for execution.
					- This requires container volume 

			We use Container Volumes to maintain the persistant data .
			
		docker volume list 
		
		docker volume create edu-vol 
		
			/var/lib/docker/volumes/edu-vol1/_data	
			
			
		docker run -it --mount source=edu-vol1,destination=/edu-vol1 centos bash
		
		docker run -it --mount source=edu-vol1,destination=/edu-vol1 ubuntu bash
			
	
	Container Orchestration Tools :::
	
		3 - tier Application Architecture - User_Registration Service 
		
			-- Frontend Layer 				-->	C1 
			
			-- Application Layer 			--> C2 
			
			-- Backend(DataBase Layer)		--> C2 
			
		Docker Compose ::
		
			- It is used to run multiple Containers as a Service.
			- Create a manifest file (Service Definition) - will be written using *.yaml script.
			
# Manual Installation of Docker Compose :::
			
DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
mkdir -p $DOCKER_CONFIG/cli-plugins
curl -SL https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose

chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
	
docker compose version

vi docker-compose.yaml

### Yaml Files are based on Keys & Values -- key:value Pairs

version: '3'
services:
  webserv1:
    image: "tomcat:8.0"
    ports:
      - 8098:8080
  dbserv1:
    image: "redis:alpine"	
		
docker compose up 			# Start the service 

docker compose down			# Stop the Service 
		
	
Docker Swarm ::
	
	Container Orchestration Tool:
	
	- Used to ensure high-availability of Containers
	
	- It is meant only of Docker Container.
	
	- It creates the replicas of container 
	
	- It scale-up / scale-down to certain extend. 
		
	
		3 - tier Application Architecture - User_Registration Service 
		
			-- Frontend Layer 				-->	C1,1,1 
			
			-- Application Layer 			--> C2,2,2
			
			-- Backend(DataBase Layer)		--> C3,3,3
			
	- Auto-Scaling & Load Balancing cannot be achieved using Docker Swarm.
	
   80  clear
   81  docker ps
   82  clear
   83  docker ps
   84  docker run centos sleep 20
   85  asdf
   86  clear
   87  docker run -d centos sleep 20
   88  docker ps
   89  docker stop 2c1d6f0143ce 47b448fc82a5
   90  docker ps
   91  docker ps -a
   92  docker start c78d690b4d6a
   93  docker ps
   94  docker stop c78d690b4d6a
   95  clear
   96  docker images
   97  docker run -it debian bash
   98  docker start 6417464a955b
   99  docker ps
  100  docker exec -it 6417464a955b bash
  101  clear
  102  docker ps -a
  103  docker images
  104  docker commit 6417464a955b loksaieta/edu-centos-git:v1.0
  105  docker images
  106  docker run -it loksaieta/edu-centos-git:v1.0 bash
  107  mkdir docker-contents
  108  cd docker-contents/
  109  vi Dockerfile
  110  cat Dockerfile
  111  docker build -t loksaieta/edu-debian-git:v1.0 .
  112  docker images
  113  cat Dockerfile
  114  vi Dockerfile
  115  clear
  116  docker build -t loksaieta/edu-debian-git:v1.0 .
  117  docker images
  118  docker history loksaieta/edu-debian-git:v1.0
  119  cat Dockerfile
  120  vi Dockerfile
  121  docker build -t loksaieta/edu-debian-git-mvn:v1.0 .
  122  cat Dockerfile
  123  docker images
  124  docker history loksaieta/edu-debian-git-mvn:v1.0
  125  docker run -it loksaieta/edu-debian-git-mvn:v1.0
  126  docker ps -a
  127  cat Dockerfile
  128  clear
  129  history
  130  su - devopsadmin
  131  clear
  132  docker ps -a
  133  docker run -d centos
  134  docker ps -a
  135  docker run -d centos sleep 10
  136  docker ps -a
  137  clear
  138  docker volume list
  139  docker volume create edu-vol1
  140  docker volume list
  141  docker volume inspect edu-vol1
  142  cd /var/lib/docker/volumes/edu-vol1
  143  ls
  144  cd _data/
  145  ls
  146  pwd
  147  clear
  148  docker images
  149  docker ps -a
  150  docker run -it centos bash
  151  docker run -it --mount source=edu-vol1,destination=/edu-vol1 centos bash
  152  ls
  153  cat file1fromcontainer.txt
  154  echo "rec1" >> hostfile1.txt
  155  ls
  156  docker run -it --mount source=edu-vol1,destination=/edu-vol1 centos bash
  157  clear
  158  cd ~
  159  docker images
  160  docker login -u loksaieta
  161  docker push loksaieta/edu-debian-git-mvn:v1.0
  162  history
	
		
